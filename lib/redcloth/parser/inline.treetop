require File.dirname(__FILE__) + "/common"

module RedCloth
  module Parser
    grammar Inline
      include Common
      
      rule inline
        element_1:inline_element
        more_elements:(inline_spaces inline_element)* {
          def build(filter)
            Ast::Inline.new(
              all_inline_elements.map {|e| e.build(filter) }
            )
          end
          def all_inline_elements
            [element_1] + more_elements.elements.map {|e| [e.inline_spaces, e.inline_element] }.flatten
          end
        }
      end
      
      rule inline_element
        bold /
        strong /
        em /
        safe_chars
      end
      
      rule end_strong
        '*' ![a-zA-Z0-9]
      end
      
      rule inline_spaces
        [\s\t]+ {
          def build(filter)
            text_value
          end
        }
      end
      
      rule safe_chars
        ('*' [-'"'a-zA-Z0-9.!?]+ / '*' / [-'"'a-zA-Z0-9.!?]+) {
          def build(filter)
            text_value
          end
        }
      end
      
      rule strong
        '*' contents:inline end_strong {
          def build(filter)
            Ast::InlineElement.new(
              {:type => :strong},
              # contents.elements.map {|e| e.elements[1].build(filter) }
              # [contents.text_value]
              contents.all_inline_elements.map {|e| e.build(filter) }
            )
          end
        }
      end
      
      
      rule bold
        '**' contents:inline '**' {
          def build(filter)
            Ast::InlineElement.new(
              {:type => :bold},
              # contents.elements.map {|e| e.elements[1].build(filter) }
              contents.all_inline_elements.map {|e| e.build(filter) }
            )
          end
        }
      end
      
      rule em
        '_' contents:inline '_' {
          def build(filter)
            Ast::InlineElement.new(
              {:type => :em},
              # contents.elements.map {|e| e.elements[1].build(filter) }
              contents.all_inline_elements.map {|e| e.build(filter) }
            )
          end
        }
      end
      
      rule default
        . {
          def build(filter)
            text_value
          end
        }
      end
      
    end
  end
end