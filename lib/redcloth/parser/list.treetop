require "redcloth/parser/common"

module RedCloth
  module Parser
    grammar List
      include Common
      rule list
        list_class_id:css_class_id?
        li 
        more_lis:("\n" li)* {
          def build(filter)
            @list_nest = li.nest
            list_opts = list_class_id.empty? ? {} : list_class_id.to_opts
            root_list = Ast::List.new(
              list_opts,
              []
            )
            @list_layout = [root_list]
            list_items.each do |li|
              if li.nest[0..-2] == @list_nest
                list_class_id = li.list_start.list_class_id
                list_opts = list_class_id.empty? ? {} : list_class_id.to_opts
                list = Ast::List.new(
                  list_opts,
                  []
                )
                @list_layout.last << list
                @list_layout << list
                @list_nest = li.nest
              elsif li.nest == @list_nest[0..-2]
                @list_layout.pop
                @list_nest = li.nest
              end
              @list_layout.last << li.build(filter)
            end
            root_list
          end
          def list_items
            [li] + more_lis.elements.map {|e| e.li } 
          end
        }
      end

      rule list_start
        list_class_id:css_class_id?
        nest:"#"+
        list_item_class_id:css_class_id?
        [\s]
      end

      rule li
        list_start
        content:list_text {
          def nest
            list_start.nest.text_value
          end
    
          def build(filter)
            list_item_class_id = list_start.list_item_class_id
            list_item_opts = list_item_class_id.empty? ? {} : list_item_class_id.to_opts
            Ast::ListItem.new(
              list_item_opts,
              content.text_value
            )
          end
        }
      end

      rule list_text
        (!(li_end) .)+ &li_end
      end

      rule li_end
        "\n" list_start / block_end
      end
    end
  end
end