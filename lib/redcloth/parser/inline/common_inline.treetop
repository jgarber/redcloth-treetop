require File.dirname(__FILE__) + "/../common"

module RedCloth
  module Parser
    grammar CommonInline
      include Common
      
      rule inline
        element_1:inline_element
        punct
        more_elements:(!li_end inline_spaces inline_element punct)* {
          def build(filter)
            all_inline_elements.map {|e| e.build(filter) }.inject([]) do |a, e|
              if e.is_a?(String)
                if a.last.is_a?(String)
                  a.last << e
                else
                  a << e unless e.blank?
                end
              else
                a << e
              end
              a
            end
          end
          def all_inline_elements
            [element_1, punct] + more_elements.elements.map {|e| e.elements }.flatten.reject do |e|
              e.text_value.blank?
            end
          end
        }
      end
      
      rule inline_element
        word
      end
      
      rule word
        (
          ( !(end_bold / end_strong) mchar )+ /
          '**' /
          '*'
        ) {
          def build(filter)
            text_value
          end
        }
      end
      
      rule punct
        [?.!]* {
          def build(filter)
            text_value
          end
        }
      end
      
      rule mchar
        [^\s\r\n\t]
      end
      
      rule inline_spaces
        [\s\t]+ {
          def build(filter)
            text_value
          end
        }
      end
      
      rule end_strong
        '*' !(![^a-zA-Z0-9*] .)
      end
      
      rule end_bold
        '**' !(![^a-zA-Z0-9*] .)
      end
      
    end
  end
end